# vmi.api.VizmeAPI.coffee
# Vizme, Inc. (C)2011-2012
# Scott Ernst

# require vmi.api.exec.APIManager
# require vmi.api.io.APIRequest
# require vmi.util.Types
# require vmi.util.ObjectUtils
# require vmi.util.time.DataTimer
# require vmi.util.url.URLUtils
# require vmi.util.string.StringUtils

# Common library classes to include in the base
#----------------------------------------------
# require vmi.api.render.ElementRenderer
# require vmi.api.render.GuiRenderer

#___________________________________________________________________________________________________ VizmeAPI
class VizmeAPI
    ### Globally assigned (window.VIZME) API class. Represents the complete public face of for the
        VIZME API.
    ###

#===================================================================================================
#                                                                                       C L A S S

#___________________________________________________________________________________________________ constructor
    constructor: () ->
        ###Creates the instance of the VIZME API class.###

        # The actual API management class instance controlling the VIZME object.
        e                    = new APIManager()
        @exec                = e
        @addEventListener    = e.addEventListener
        @removeEventListener = e.removeEventListener
        @dispatchEvent       = e.dispatchEvent
        @render              = e.render
        @resize              = e.resize
        @resizeEnable        = e.resizeEnable

        # Store the source VIZME object until preInit to prevent race conditions from asynchronous
        # actions.
        v   = VIZME
        @_v = v

        # The following are state variables that specify the current load/readiness state of the
        # VIZME API.
        @CREATED = true
        @INIT    = false
        @READY   = false
        @LOADED  = false
        @SCRIPTS = v.SCRIPTS
        @TRC     = v.TRC

        # Stubbed trace function, which is replaced by the logging trace function when the Logger
        # module loads.
        @trace = (args...) ->
            VIZME.TRC.push(args)
            return false

        # Configuration settings (loaded during session creation)
        @CONFIG = v.CONFIG

        # Loaded/Initialized modules
        @mod = v.mod

        # Class registry
        @r = v.r

        # These values are set at deploy time by the JS API view so that they are always current.
        @VERSION  = "%{REPLACE-VIZME-VERSION}%"
        @REVISION = "%{REPLACE-VIZME-REVISION}%"
        @DOMAINS  = {
            IMAGE: '%{REPLACE-VIZME-IMAGE-DOMAIN}%',
            DATA:  '%{REPLACE-VIZME-DATA-DOMAIN}%',
            JS:    '%{REPLACE-VIZME-JS-DOMAIN}%',
            CSS:   '%{REPLACE-VIZME-CSS-DOMAIN}%',
            WEB:   '%{REPLACE-VIZME-WEB-DOMAIN}%'
        }

        # Mirrors the queue in the VIZME beach head object to store items until they can be
        # processed. This exists in the VIZME object as well to prevent race conditions.
        @_queue = v._queue

        return

#===================================================================================================
#                                                                                     P U B L I C

#___________________________________________________________________________________________________ unqueue
    unqueue: () =>
        ### The pre-initialization step handles registering all of the values stored in the beach
            head VIZME object to prevent race conditions from asynchronous actions. During
            pre-init the data structures are shared between the beach head VIZME object and this
            object, which prevents data corruption during the hand-off.
        ###

        q = @_queue
        while q.length
            i = q.shift()
            switch i.t
                when 'el'
                    @addEventListener(i.id, i.cb)
                when 'de'
                    @dispatchEvent(i.id, i.d, i.os)

        return true

#___________________________________________________________________________________________________ init
    init: (requestCode, args, callback, destination) =>
        ### Initializes the Vizme platform for use in the page. Requires that you pass in a
            request code, which must be generated by your server and written into the page.

            @@@param requestCode:string
                Request code generated on your hosting server. The request code is used to activate
                an active session between the Vizme servers and the browser. Without an active
                session the browser will be denied access to the vizme servers.
            @@@param args:object -default=null
                A collection of optional arguments to modify the way Vizme operates in your page.
                The possible arguments are:
                [#list]
                    [#item][#b]showLoading[/#b] [#i][Default: false][/#i]:
                        When true, Vizme will display a modal loading icon overlay on the page
                        until Vizme has completed the initialization process. This is useful if
                        you want to change the default asynchronous loading behavior for your
                        page. More advanced options can also be specified as an object:
                            [#item]color: The foreground color for the loading display. If none is
                                   specified it defaults to #CCC.[/#item]
                            [#item]background: The background color for the loading display. If none
                                   is specified it defaults to #444.[/#item]
                        [/#item]
                    [#item][#b]defaultTheme[/#b] [#i][Default: null][/#i]:
                        Loads the default Vizme theme into the page for display. If you do not
                        specify this thme the page loads the default theme set in your Vizme
                        account.[/#item]
                    [#item][#b]themes[/#b] [#i][Default: null][/#i]:
                        A list of other themes to load into the page and make available for later
                        use.[/#item]
                    [#item][#b]styleBody[/#b] [#i][Default: false][/#i]:
                        When true the default style for the page (specified explicitly or
                        implicitly) will be applied to the body tag and as a result apply to the
                        entire page, not just the Vizme block elements.[/#item]
                    [#item][#b]globalScale[/#b] [#i][Default: 1.0][/#i]:
                        The global scale adjustment for the text on the page. The default value
                        leaves the text sizes unchanged from their styled values. Other values will
                        grow or shrink all text on the page.[/#item]
                [#/list]
            @@@param callback:function
                   -default=null
                A function that is executed when the initialization process is complete and Vizme
                is ready for use. At this point Vizme has the active session needed that allows you
                to call other VIZME commands. For complete asynchronous operation, set this argument
                to null.
            @@@param destination:string -default=null -dev
                Ignore this parameter, it is an internal argument used by Vizme and not available
                as part of the public API.
        ###

        @unqueue()
        api = @exec
        api.init(requestCode, args, destination)
        @dispatchEvent('API:init')
        api.createSession(callback)
        api.render()

        return

#___________________________________________________________________________________________________ onLibraryReady
    onLibraryReady: (ids, callback) ->
        ### Executes the specified callback when the library or libraries have been loaded and are
            available for use.

            @@@param ids:string,array
                A library identifier, or a list of library identifiers that must be loaded before
                the callback is executed.

            @@@param callback:function
                The function to execute when the libraries have been rendered. The signature for the
                callback is callback().

            @@@return boolean
                True if the library callback was registered and the load process started. False if
                either the library was already loaded, in which case the callback is executed
                immediately, or if the callback argument was invalid.
        ###

        if not Types.isFunction(callback)
            return false

        return VIZME.exec.loadLibraries(ids, callback)

#___________________________________________________________________________________________________ onRendered
    onRendered: (rootDOM, callback) ->
        ###Executes a callback function when the specified rootDOM has finished rendering. This will
        execute a render operation if one is not already in process.

        @@@param rootDOM:object
            The root dom node to render.

        @@@param callback:function
            The function to execute when the specified DOM has been fully rendered.
        ###

        if not Types.isFunction(callback)
            return false

        return VIZME.render(rootDOM, callback)

#___________________________________________________________________________________________________ api
    api: (category, identifier, args, callback, localData, cacheID, opts) ->
        ###Executes the specified API request.###

        return VIZME.exec.executeAPIRequest(
            category, identifier, args, callback, localData, false, cacheID, opts
        )

#___________________________________________________________________________________________________ help
    help: (identifier, details) ->
        h = VIZME.mod.help

        if not h
            return false

        if identifier
            if details
                h.showContextDetails(identifier)
            else
                h.showContext(identifier)
        else
            h.hideContext()
        return true

#___________________________________________________________________________________________________ setGlobalErrorCallback
    setGlobalErrorCallback: (callback) ->
        ### Sets the global error handler function that receives the callback from any API actions
            that return a global-level error.
        ###

        APIRequest.globalErrorHandler = callback
        return true
